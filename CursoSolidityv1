pragma solidity 0.8.4;

contract CursoDeSolidity{
    
    struct Aluno {
    string nomeAluno;
    string sobrenomeAluno;
    uint256 idadeAluno;
    address payable enderecoCarteiraAluno;
    }
    
    struct Professor {
    string nomeProfessor;
    string sobrenomeProfessor;    
    uint256 idadeProfessor;
    address payable enderecoCarteiraProfessor;
    }
    
    uint constant notaminima = 7;
    string constat requisito = Advogado;
    
    nomeAluno = "Alana";
    sobrenomeAluno = "da Silva";
    idadeAluno = "24";
    nomeProfessor = "Carlos";
    sobrenomeProfessor = "Moraes";
    idadeProfessor = 40;
    notafinal = 8;
    }
    sobrenomeAluno = "da Silva";
    idadeAluno = "24";
    nomeProfessor = "Carlos";
    sobrenomeProfessor = "Moraes";
    idadeProfessor = 40;
    notafinal = 8;
    }
    
    constructor() {
    nomeAluno = "Alana";
    sobrenomeAluno = "da Silva";
    idadeAluno = "24";
    enderecoCarteiraAluno = CarteiraAlana;
    nomeProfessor = "Carlos";
    sobrenomeProfessor = "Moraes";
    idadeProfessor = 40;
    enderecoCarteiraProfessor = CarteiraCarlos;
    notafinal = 8;
    }
  
   function obtemNomeAluno() public view returns (string memory) {
        return nomeAluno;
   }
  
  function aprovacao (uint256 notaAprovacao) 
   public
    pure
    returns (bool resposta) {
        if (notafinal <= notaminima) {
            return true;
        } else {
            return false;
        }
    
    mapping(uint => string) public listaAlunos;
    mapping(uint => Aula) public aulas;
    mapping(address => mapping(uint => Aula)) public aulasAssistidas;
    
    struct Aula {
        string nomedaaula;
        string datadaaula;
        
    }
    
    constructor() {
    aluno[1] = "Alana";
    aluno[2] = "Bruno";
    aluno[3] = "Carla";
    aluno[4] = "Daniel";
    
    }
    
    function addAula(uint _id, string memory _nomedaaula, string memory _datadaaula) public {
        aulas[_id] = Aula(_nomedaaula, _datadaaula);

    }
    
    function aulasAssistidas(uint _id, string memory _nomeaula, string memory _datadaaula) public {
        aulasAssistidas[msg.sender][_id] = Aula(_nomedaaula, _datadaaula);

    uint[] public numeroDeAlunosPresentesnaAula = [4,3,4];
    string[] public provasAplicadas = ["blockchain", "ethereum", "solidity"];
    string[] public bibliografia;
   
   function addBibliografia(string memory _bibliografia) public {
        values.push(_bibliografia);
   }
   
    function quantidadeBibliografia() public view returns(uint) {
        return bibliografia.length;
    }
   
   event novoAluno(string nomeAluno);
   
    modifier verificaPreRequisito {
        require(msg.value == preRequisito, "Somente Advogados podem participar do Curso");
        _;
    }
    
    address payable enderecoCarteiraProfessor;
    uint prazoFinalCurso = block.timestamp + (30*84600);
    //a duracao do curso eh de 30 dias
